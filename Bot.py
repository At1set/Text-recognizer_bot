from Api_token import *
from config import *

from aiogram import Bot, types, F
from aiogram import Dispatcher
from aiogram.filters import CommandStart, Command
# from Bot_filters import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import messageHendlers as main_functions

import asyncio
import os


class State(StatesGroup):
  prozessing = State()


bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.message(State.prozessing)
async def deleteMessages(message: types.Message):
  return await message.delete()


@dp.message(CommandStart())
async def start_command(message: types.Message):
  await message.answer(f"""\
"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username} !üòâ"

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π ‚ùì: /help
–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏üë™: /creators
–ë–æ–Ω—É—ÅüéÅ: /bonus
""")
  return await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEIxyxkTSnLjHcab7Wu08tDHOHsMmVujAACiSIAAsSb6Us7ZFai5iiSfC8E")


@dp.message(Command('help'))
async def help_command(message: types.Message):
  return await message.answer("""\
–î–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –æ—á–µ–Ω—å –ª–µ–≥–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!
–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç,
(–û—á–µ–Ω—å –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞)
–∞ —è –ø–æ–ø—Ä–æ–±—É—é —Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ 
—Ç–µ–±–µ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –º–æ–≥—É —Å–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª–æ–º.
""")


@dp.message(Command('creators'))
async def creators_command(message: types.Message):
  return await message.answer("""\
–ê–≤—Ç–æ—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:

–ë–∞—Ü—é—Ä–∞ –ò–ª—å—è @At1setüòé - –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç.

–î—ã—á–∫–æ –î–º–∏—Ç—Ä–∏–π @di4kodü§© - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –±–æ—Ç–∞, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏

–ê–±–ª—è–∫–∏–º–æ–≤ –°–µ–ª–∏–º @bazazakrbltaüò∂‚Äçüå´Ô∏è - –°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–∏, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è
""")


@dp.message(Command('bonus'))
async def bonus_command(message: types.Message):
  return await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚öíÔ∏è")


@dp.message(F.photo)
async def photo_handler(message: types.Message, state: FSMContext):
  isImageSaved, file_name = await main_functions.saveImage(bot, message)
  if (not isImageSaved):
    return await message.answer("–û–π, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
  
  await state.set_state(State.prozessing)
  state = await state.set_data({"file_name": file_name})

  return await bot.send_message(message.from_user.id, "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è?", reply_markup=\
  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–¢–µ–∫—Å—Ç–æ–º", callback_data="out_text"), InlineKeyboardButton(text="–§–∞–π–ª .txt", callback_data="out_file")]
  ]))


@dp.message()
async def echo_message(message: types.Message):
  await bot.send_message(message.from_user.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª—ã.")


@dp.callback_query()
async def photo_callback_hanler(callback: types.CallbackQuery, state: FSMContext):
  async def exit(message="", photo_path="", txt_path=""):
    await state.clear()
    if len(message) > 0: await bot.send_message(callback.from_user.id, message)
    if len(photo_path) > 0: os.remove(photo_path)
    if len(txt_path) > 0: os.remove(txt_path)
    return await bot.answer_callback_query(callback.id ,text=message)
  
  data = await state.get_data()
  if (data == {}): return await exit("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
  file_name = data["file_name"]

  await callback.message.delete()
  await main_functions.animate_message_loading(bot, callback, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥")
  
  result = main_functions.readImage(file_name)
  if len(result) == 0:
    return await exit("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –±–æ—Ç –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –≤–∞—à–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.", f"./src/data/{file_name}")
  
  result_path = ""
  if (callback.data == "out_text"):
    await bot.send_message(callback.from_user.id, "–ì–æ—Ç–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ")
    await asyncio.sleep(2)
    await bot.send_message(callback.from_user.id, "\n\n".join(result))
  elif (callback.data == "out_file"):
    result_path = main_functions.writeResults(file_name, result)
    await bot.send_document(callback.from_user.id, types.FSInputFile(result_path, "Done.txt"))

  return await exit("", f"./src/data/{file_name}", result_path)


async def main():
  await dp.start_polling(bot)


if __name__ == '__main__':
  asyncio.run(main())